import { NextResponse } from 'next/server';
import { db } from '@/lib/db-edge';
import { sendSMS } from '@/lib/twilio';
import { generateWeeklySchedule } from '@/lib/notification-messages';
import { logger } from '@/lib/logger-edge';

// This would be triggered by a cron job on the configured weekly schedule day
export async function POST(request: Request) {
  try {
    // Verify cron secret
    const { searchParams } = new URL(request.url);
    const token = searchParams.get('token');
    
    if (token !== process.env.CRON_SECRET) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Get all users with weekly schedule enabled
    const users = await db.getUsersWithWeeklyScheduleEnabled();
    
    const results = {
      sent: 0,
      failed: 0,
      errors: [] as string[]
    };
    
    for (const user of users) {
      try {
        // Get cleaners for this user
        const cleaners = await db.getCleaners(user.id);
        
        // Get schedule for the week
        const schedule = await db.getSchedule(user.id);
        
        // Send weekly schedule to each cleaner
        for (const cleaner of cleaners) {
          if (cleaner.phone) {
            const message = generateWeeklySchedule({
              cleanerId: cleaner.id,
              cleanerName: cleaner.name,
              scheduleItems: schedule
            });
            
            await sendSMS(cleaner.phone, message);
            results.sent++;
          }
        }
      } catch (error) {
        logger.error('Failed to send weekly schedule for user', { userId: user.id, error });
        results.failed++;
        results.errors.push(`User ${user.id}: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    logger.info('Weekly schedule job completed', results);
    
    return NextResponse.json({
      success: true,
      results
    });
  } catch (error) {
    logger.error('Weekly schedule job failed', error);
    return NextResponse.json(
      { error: 'Failed to send weekly schedules' },
      { status: 500 }
    );
  }
}